<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Lead â‡„ Sales Matcher</title>
  <!-- Tailwind (CDN) -->
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen bg-gray-50 text-gray-900">
  <div id="root"></div>

  <!-- React 18 + ReactDOM (CDN) -->
  <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  <!-- Babel so we can write JSX in this single file -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <script type="text/babel">
    const { useMemo, useState } = React;

    // ===== CSV Parsing =====
    function parseCSV(text) {
      const rows = [];
      let i = 0, field = '', row = [], inQuotes = false;
      while (i < text.length) {
        const c = text[i];
        if (c === '"') {
          if (inQuotes && text[i + 1] === '"') { field += '"'; i += 2; continue; }
          inQuotes = !inQuotes; i++; continue;
        }
        if (!inQuotes && c === ',') { row.push(field); field = ''; i++; continue; }
        if (!inQuotes && c === '\n') { row.push(field); rows.push(row); field = ''; row = []; i++; continue; }
        if (!inQuotes && c === '\r') { i++; continue; }
        field += c; i++;
      }
      row.push(field); rows.push(row);
      return rows;
    }

    function toObjects(rows) {
      if (!rows || rows.length === 0) return [];
      const headers = rows[0].map(h => h.trim());
      return rows.slice(1)
        .filter(r => r.some(x => (x ?? '').toString().trim() !== ''))
        .map(r => {
          const obj = {};
          headers.forEach((h, idx) => (obj[h] = r[idx] ?? ''));
          return obj;
        });
    }

    // ===== Normalizers =====
    const normalizeEmail = (e) => (e || '').toString().trim().toLowerCase();
    const normalizePhone = (p) => (p || '').toString().replace(/\D+/g, '').replace(/^1(\d{10})$/, '$1');
    const normalizeName  = (n) => (n || '').toString().trim().toLowerCase().replace(/\s+/g, ' ');

    // Flexible alias finder: matches exact alias or substring
    function findCanonical(raw, aliasMap) {
      const lc = (raw || '').toString().toLowerCase();
      if (aliasMap.has(lc)) return aliasMap.get(lc);
      for (const [alias, canonical] of aliasMap.entries()) {
        if (alias && lc.includes(alias)) return canonical;
      }
      return raw || 'Unknown';
    }

    // ===== Utils =====
    function downloadCSV(filename, rows) {
      if (!rows || rows.length === 0) return;
      const headers = Object.keys(rows[0]);
      const csv = [headers.join(',')]
        .concat(rows.map(r => headers.map(h => {
          const v = r[h] ?? '';
          const s = v.toString().replace(/"/g, '""');
          return /[",\n]/.test(s) ? `"${s}"` : s;
        }).join(',')))
        .join('\n');
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = filename;
      document.body.appendChild(a); a.click();
      document.body.removeChild(a); URL.revokeObjectURL(url);
    }

    // ===== Matching =====
    function matchRecords({ sales, leads, mapSales, mapLeads }) {
      const emailIdx = new Map(), phoneIdx = new Map(), nameIdx = new Map();
      const sEmail = mapSales.email, sPhone = mapSales.phone, sName = mapSales.name;

      sales.forEach(s => {
        const e = normalizeEmail(s[sEmail]);
        const p = normalizePhone(s[sPhone]);
        const n = normalizeName(s[sName]);
        if (e) emailIdx.set(e, s);
        if (p) phoneIdx.set(p, s);
        if (n) nameIdx.set(n, s);
      });

      const lEmail = mapLeads.email, lPhone = mapLeads.phone, lName = mapLeads.name;
      const matches = [];

      leads.forEach(lead => {
        const le = normalizeEmail(lead[lEmail]);
        const lp = normalizePhone(lead[lPhone]);
        const ln = normalizeName(lead[lName]);

        let sale = null; const matchedOn = [];
        if (!sale && le && emailIdx.has(le)) { sale = emailIdx.get(le); matchedOn.push('email'); }
        if (!sale && lp && phoneIdx.has(lp)) { sale = phoneIdx.get(lp); matchedOn.push('phone'); }
        if (!sale && ln && nameIdx.has(ln))  { sale = nameIdx.get(ln); matchedOn.push('name'); }

        if (sale) matches.push({ lead, sale, matchedOn: matchedOn.join('|') });
      });

      return matches;
    }

    // ===== Summaries with de-duplicated revenue =====
    // Derive a sale key (no explicit sale ID in UI yet). Use normalized email/phone/name + revenue.
    function makeSaleKeyFactory(sEmail, sPhone, sName, sRevenue) {
      return function saleKey(saleObj) {
        const e = normalizeEmail(saleObj?.[sEmail]);
        const p = normalizePhone(saleObj?.[sPhone]);
        const n = normalizeName(saleObj?.[sName]);
        const rev = (saleObj?.[sRevenue] ?? '').toString().replace(/[^0-9.\-]/g, '');
        return JSON.stringify([e, p, n, rev]);
      };
    }

    function groupByPlatformSummaryDedup(matches, platformKey, revenueKey, saleKeyFn) {
      const map = new Map();
      const seenSales = new Set();
      matches.forEach(m => {
        const platform = (m.lead?.[platformKey] ?? '').toString() || 'Unknown';
        const revenueRaw = m.sale?.[revenueKey];
        const revenue = parseFloat((revenueRaw ?? '').toString().replace(/[^0-9.\-]/g, '')) || 0;
        if (!map.has(platform)) map.set(platform, { platform, leads: 0, revenue: 0 });
        const obj = map.get(platform);
        obj.leads += 1;
        const k = saleKeyFn(m.sale);
        if (!seenSales.has(k)) { obj.revenue += revenue; seenSales.add(k); }
      });
      return Array.from(map.values()).sort((a,b) => b.revenue - a.revenue);
    }

    function groupByKeySummaryDedup(matches, keyFn, revenueKey, saleKeyFn) {
      const map = new Map();
      const seenSales = new Set();
      matches.forEach(m => {
        const key = (keyFn(m) || 'Unknown').toString();
        const revenueRaw = m.sale?.[revenueKey];
        const revenue = parseFloat((revenueRaw ?? '').toString().replace(/[^0-9.\-]/g, '')) || 0;
        if (!map.has(key)) map.set(key, { key, leads: 0, revenue: 0 });
        const obj = map.get(key);
        obj.leads += 1;
        const k = saleKeyFn(m.sale);
        if (!seenSales.has(k)) { obj.revenue += revenue; seenSales.add(k); }
      });
      return Array.from(map.values()).sort((a,b) => b.revenue - a.revenue);
    }

    function App() {
      const [salesFile, setSalesFile] = useState(null);
      const [leadsFile, setLeadsFile] = useState(null);

      const salesHeaders = useMemo(() => salesFile?.headers || [], [salesFile]);
      const leadsHeaders = useMemo(() => leadsFile?.headers || [], [leadsFile]);

      // Column mapping
      const [sEmail, setSEmail] = useState("");
      const [sPhone, setSPhone] = useState("");
      const [sName, setSName] = useState("");
      const [sRevenue, setSRevenue] = useState("");

      const [lEmail, setLEmail] = useState("");
      const [lPhone, setLPhone] = useState("");
      const [lName, setLName] = useState("");
      const [lPlatform, setLPlatform] = useState("");

      // Platform aliases (editable)
      const defaultAliasText = `Facebook: fb, facebook
TikTok: tt, tiktok
YouTube: yt, youtube`;
      const [aliasText, setAliasText] = useState(defaultAliasText);
      const aliasMap = useMemo(() => {
        const map = new Map();
        aliasText.split(/\n+/).forEach(line => {
          const parts = line.split(':');
          if (parts.length < 2) return;
          const canonical = parts[0].trim();
          const aliases = parts[1].split(',').map(s => s.trim().toLowerCase()).filter(Boolean);
          if (canonical) map.set(canonical.toLowerCase(), canonical);
          aliases.forEach(a => map.set(a, canonical));
        });
        return map;
      }, [aliasText]);

      // Offer aliases (editable)
      const defaultOfferAliasText = `Tune Up: tune up, tune-up, tup
Free Quote: free quote, fq`;
      const [offerAliasText, setOfferAliasText] = useState(defaultOfferAliasText);
      const offerAliasMap = useMemo(() => {
        const map = new Map();
        offerAliasText.split(/\n+/).forEach(line => {
          const parts = line.split(':');
          if (parts.length < 2) return;
          const canonical = parts[0].trim();
          const aliases = parts[1].split(',').map(s => s.trim().toLowerCase()).filter(Boolean);
          if (canonical) map.set(canonical.toLowerCase(), canonical);
          aliases.forEach(a => map.set(a, canonical));
        });
        return map;
      }, [offerAliasText]);

      const ready = salesFile && leadsFile && sRevenue && lPlatform &&
        (sEmail || sPhone || sName) && (lEmail || lPhone || lName);

      const matches = useMemo(() => {
        if (!ready) return [];
        return matchRecords({
          sales: salesFile.data,
          leads: leadsFile.data,
          mapSales: { email: sEmail, phone: sPhone, name: sName },
          mapLeads: { email: lEmail, phone: lPhone, name: lName },
        });
      }, [ready, salesFile, leadsFile, sEmail, sPhone, sName, lEmail, lPhone, lName]);

      // Sale key factory for de-dupe
      const saleKey = useMemo(() => makeSaleKeyFactory(sEmail, sPhone, sName, sRevenue), [sEmail, sPhone, sName, sRevenue]);

      // Raw summary by exact Platform field (with de-duped revenue)
      const platformSummary = useMemo(() => {
        if (!ready) return [];
        return groupByPlatformSummaryDedup(matches, lPlatform, sRevenue, saleKey);
      }, [matches, ready, lPlatform, sRevenue, saleKey]);

      // Rollups (aliases applied) with de-duped revenue
      const platformRollup = useMemo(() => {
        if (!ready) return [];
        return groupByKeySummaryDedup(
          matches,
          (m) => findCanonical(m.lead?.[lPlatform], aliasMap),
          sRevenue,
          saleKey
        );
      }, [matches, ready, lPlatform, sRevenue, aliasMap, saleKey]);

      const offerRollup = useMemo(() => {
        if (!ready) return [];
        return groupByKeySummaryDedup(
          matches,
          (m) => findCanonical(m.lead?.[lPlatform], offerAliasMap),
          sRevenue,
          saleKey
        );
      }, [matches, ready, lPlatform, sRevenue, offerAliasMap, saleKey]);

      // Total revenue (unique sales only)
      const totalRevenue = useMemo(() => {
        const seen = new Set();
        let sum = 0;
        matches.forEach(m => {
          const k = saleKey(m.sale);
          if (!seen.has(k)) {
            const revenue = parseFloat((m.sale?.[sRevenue] ?? '').toString().replace(/[^0-9.\-]/g, '')) || 0;
            sum += revenue; seen.add(k);
          }
        });
        return sum;
      }, [matches, sRevenue, saleKey]);

      const downloadMatches = () => {
        const rows = matches.map(m => ({
          matched_on: m.matchedOn,
          platform_raw: (m.lead?.[lPlatform] ?? '').toString(),
          platform_norm: findCanonical((m.lead?.[lPlatform] ?? '').toString(), aliasMap),
          offer_norm: findCanonical((m.lead?.[lPlatform] ?? '').toString(), offerAliasMap),
          revenue: m.sale?.[sRevenue] ?? '',
          lead_email: m.lead?.[lEmail] ?? '',
          sale_email: m.sale?.[sEmail] ?? '',
          lead_phone: m.lead?.[lPhone] ?? '',
          sale_phone: m.sale?.[sPhone] ?? '',
          lead_name: m.lead?.[lName] ?? '',
          sale_name: m.sale?.[sName] ?? '',
        }));
        downloadCSV('matched_leads.csv', rows);
      };

      const downloadPlatformSummary = () => {
        const rows = platformSummary.map(r => ({ platform_raw: r.platform, leads: r.leads, revenue: r.revenue.toFixed(2) }));
        downloadCSV('platform_summary_raw.csv', rows);
      };

      const downloadPlatformRollup = () => {
        const rows = platformRollup.map(r => ({ platform: r.key, leads: r.leads, revenue: r.revenue.toFixed(2) }));
        downloadCSV('platform_rollup.csv', rows);
      };

      const downloadOfferRollup = () => {
        const rows = offerRollup.map(r => ({ offer: r.key, leads: r.leads, revenue: r.revenue.toFixed(2) }));
        downloadCSV('offer_rollup.csv', rows);
      };

      return (
        <div className="max-w-6xl mx-auto p-6">
          <header className="mb-6">
            <h1 className="text-2xl md:text-3xl font-bold">Lead â‡„ Sales Matcher</h1>
            <p className="text-sm text-gray-600 mt-1">Sales Database â†” Lead DB (platform attribution & revenue). All in-browser.</p>
          </header>

          <div className="grid md:grid-cols-2 gap-6 mb-6">
            <div className="rounded-2xl border p-4 bg-white">
              <h2 className="font-semibold mb-3">1) Upload Sales Database CSV</h2>
              <FilePicker label="Sales CSV" onLoad={setSalesFile} />
              {salesFile && (
                <div className="mt-3 text-xs text-gray-600">
                  Loaded <strong>{salesFile.fileName}</strong> with {salesFile.data.length.toLocaleString()} rows.
                </div>
              )}
              <div className="mt-4 grid grid-cols-2 gap-3">
                <Select label="Sales: Email"   value={sEmail}    onChange={setSEmail}  options={salesHeaders} />
                <Select label="Sales: Phone"   value={sPhone}    onChange={setSPhone}  options={salesHeaders} />
                <Select label="Sales: Name"    value={sName}     onChange={setSName}   options={salesHeaders} />
                <Select label="Sales: Revenue $" value={sRevenue} onChange={setSRevenue} options={salesHeaders} />
              </div>
            </div>

            <div className="rounded-2xl border p-4 bg-white">
              <h2 className="font-semibold mb-3">2) Upload Lead Database CSV</h2>
              <FilePicker label="Leads CSV" onLoad={setLeadsFile} />
              {leadsFile && (
                <div className="mt-3 text-xs text-gray-600">
                  Loaded <strong>{leadsFile.fileName}</strong> with {leadsFile.data.length.toLocaleString()} rows.
                </div>
              )}
              <div className="mt-4 grid grid-cols-2 gap-3">
                <Select label="Leads: Email"   value={lEmail}     onChange={setLEmail}    options={leadsHeaders} />
                <Select label="Leads: Phone"   value={lPhone}     onChange={setLPhone}    options={leadsHeaders} />
                <Select label="Leads: Name"    value={lName}      onChange={setLName}     options={leadsHeaders} />
                <Select label="Leads: Platform" value={lPlatform} onChange={setLPlatform} options={leadsHeaders} />
              </div>
            </div>
          </div>

          <div className="rounded-2xl border p-4 bg-white mb-6">
            <h2 className="font-semibold mb-2">3) Platform Aliases (optional)</h2>
            <p className="text-xs text-gray-600 mb-2">Map abbreviations to a canonical name. One line per platform. Format: <code>Canonical: alias1, alias2</code></p>
            <textarea value={aliasText} onChange={(e) => setAliasText(e.target.value)} className="w-full rounded-xl border p-3 text-sm font-mono min-h-[110px]" />
            <div className="text-xs text-gray-500 mt-2">Examples included for Facebook/FB, TikTok/TT, YouTube/YT. Add your own (e.g., <em>Google: gads, google ads, sem</em>).</div>
          </div>

          <div className="rounded-2xl border p-4 bg-white mb-6">
            <h2 className="font-semibold mb-2">4) Offer Aliases (optional)</h2>
            <p className="text-xs text-gray-600 mb-2">Extract offers from the same Platform field. One line per offer. Format: <code>Canonical: alias1, alias2</code></p>
            <textarea value={offerAliasText} onChange={(e) => setOfferAliasText(e.target.value)} className="w-full rounded-xl border p-3 text-sm font-mono min-h-[110px]" />
            <div className="text-xs text-gray-500 mt-2">Examples included for Tune Up and Free Quote. Add more like <em>Financing: 0% apr, no payments</em>.</div>
          </div>

          <div className="flex flex-wrap gap-4 mb-6">
            <SummaryCard title="Files" value={(salesFile ? 1 : 0) + (leadsFile ? 1 : 0) + "/2"} sub="Uploads ready" />
            <SummaryCard title="Matches" value={matches.length.toLocaleString()} sub="Lead â†”ï¸Ž Sale pairs" />
            <SummaryCard title="Revenue (All)" value={`$${totalRevenue.toLocaleString(undefined, { maximumFractionDigits: 2 })}`} sub="De-duped by unique sale" />
          </div>

          <div className="mb-4 flex gap-3">
            <button disabled={!ready || matches.length === 0} onClick={downloadMatches} className={`px-4 py-2 rounded-xl text-sm font-medium shadow-sm ${(!ready || matches.length===0) ? 'bg-gray-200 text-gray-500' : 'bg-black text-white'}`}>Download Matched CSV</button>
            <button disabled={!ready || platformSummary.length === 0} onClick={downloadPlatformSummary} className={`px-4 py-2 rounded-xl text-sm font-medium shadow-sm ${(!ready || platformSummary.length===0) ? 'bg-gray-200 text-gray-500' : 'bg-black text-white'}`}>Download Raw Platform CSV</button>
            <button disabled={!ready || platformRollup.length === 0} onClick={downloadPlatformRollup} className={`px-4 py-2 rounded-xl text-sm font-medium shadow-sm ${(!ready || platformRollup.length===0) ? 'bg-gray-200 text-gray-500' : 'bg-black text-white'}`}>Download Platform Rollup</button>
            <button disabled={!ready || offerRollup.length === 0} onClick={downloadOfferRollup} className={`px-4 py-2 rounded-xl text-sm font-medium shadow-sm ${(!ready || offerRollup.length===0) ? 'bg-gray-200 text-gray-500' : 'bg-black text-white'}`}>Download Offer Rollup</button>
          </div>

          {/* Raw platform table (as-is values) */}
          <div className="rounded-2xl border bg-white">
            <div className="p-4 border-b flex items-center justify-between">
              <h3 className="font-semibold">Platform Summary (Raw)</h3>
              <div className="text-xs text-gray-500">Grouped by exact text in your Platform column â€” revenue is de-duped by sale</div>
            </div>
            <div className="p-4 overflow-x-auto">
              <table className="min-w-full text-sm">
                <thead>
                  <tr className="text-left text-gray-600">
                    <th className="px-3 py-2">Platform (raw)</th>
                    <th className="px-3 py-2">Matched Leads</th>
                    <th className="px-3 py-2">Revenue</th>
                  </tr>
                </thead>
                <tbody>
                  {platformSummary.map((r, idx) => (
                    <tr key={idx} className="border-t">
                      <td className="px-3 py-2">{r.platform}</td>
                      <td className="px-3 py-2">{r.leads.toLocaleString()}</td>
                      <td className="px-3 py-2">${r.revenue.toLocaleString(undefined, { maximumFractionDigits: 2 })}</td>
                    </tr>
                  ))}
                  {platformSummary.length === 0 && (
                    <tr><td className="px-3 py-6 text-gray-500" colSpan={3}>No data yet. Upload files and map columns.</td></tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>

          {/* Combined summaries */}
          <div className="grid md:grid-cols-2 gap-6 mt-6">
            <div className="rounded-2xl border bg-white">
              <div className="p-4 border-b flex items-center justify-between">
                <h3 className="font-semibold">Combined Summary â€” Platforms</h3>
                <div className="text-xs text-gray-500">Aliases merged (FB/TikTok/YT, etc.). Revenue is de-duped by sale.</div>
              </div>
              <div className="p-4 overflow-x-auto">
                <table className="min-w-full text-sm">
                  <thead>
                    <tr className="text-left text-gray-600">
                      <th className="px-3 py-2">Platform</th>
                      <th className="px-3 py-2">Matched Leads</th>
                      <th className="px-3 py-2">Revenue</th>
                    </tr>
                  </thead>
                  <tbody>
                    {platformRollup.map((r, idx) => (
                      <tr key={idx} className="border-t">
                        <td className="px-3 py-2">{r.key}</td>
                        <td className="px-3 py-2">{r.leads.toLocaleString()}</td>
                        <td className="px-3 py-2">${r.revenue.toLocaleString(undefined, { maximumFractionDigits: 2 })}</td>
                      </tr>
                    ))}
                    {platformRollup.length === 0 && (
                      <tr><td className="px-3 py-6 text-gray-500" colSpan={3}>No data yet.</td></tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="rounded-2xl border bg-white">
              <div className="p-4 border-b flex items-center justify-between">
                <h3 className="font-semibold">Combined Summary â€” Offers</h3>
                <div className="text-xs text-gray-500">Derived from Platform text (e.g., "Tune Up", "Free Quote"). Revenue is de-duped by sale.</div>
              </div>
              <div className="p-4 overflow-x-auto">
                <table className="min-w-full text-sm">
                  <thead>
                    <tr className="text-left text-gray-600">
                      <th className="px-3 py-2">Offer</th>
                      <th className="px-3 py-2">Matched Leads</th>
                      <th className="px-3 py-2">Revenue</th>
                    </tr>
                  </thead>
                  <tbody>
                    {offerRollup.map((r, idx) => (
                      <tr key={idx} className="border-t">
                        <td className="px-3 py-2">{r.key}</td>
                        <td className="px-3 py-2">{r.leads.toLocaleString()}</td>
                        <td className="px-3 py-2">${r.revenue.toLocaleString(undefined, { maximumFractionDigits: 2 })}</td>
                      </tr>
                    ))}
                    {offerRollup.length === 0 && (
                      <tr><td className="px-3 py-6 text-gray-500" colSpan={3}>No data yet.</td></tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <footer className="text-xs text-gray-500 mt-8">
            <p>Tips: Ensure both CSVs include at least one of Email, Phone, or Name. Revenue should be numeric (e.g., 1250 or $1,250.00). Platform comes from your Lead DB.</p>
            <p className="mt-2">Privacy: All processing happens in your browser. No data is uploaded to any server.</p>
          </footer>
        </div>
      );
    }

    // ===== Reusable UI components =====
    function FilePicker({ label, onLoad }) {
      const handle = async (e) => {
        const file = e.target.files?.[0];
        if (!file) return;
        const text = await file.text();
        const rows = parseCSV(text);
        const objs = toObjects(rows);
        onLoad({ fileName: file.name, headers: rows[0], data: objs });
      };
      return (
        <div className="flex flex-col gap-2">
          <label className="text-sm font-medium text-gray-700">{label}</label>
          <input type="file" accept=".csv" onChange={handle} className="block w-full text-sm text-gray-700" />
          <p className="text-xs text-gray-500">CSV only. Data stays in your browser.</p>
        </div>
      );
    }

    function Select({ label, value, onChange, options }) {
      return (
        <div className="flex flex-col gap-1 min-w-[180px]">
          <label className="text-xs text-gray-600">{label}</label>
          <select value={value} onChange={(e) => onChange(e.target.value)} className="rounded-xl border px-3 py-2 text-sm">
            <option value="">â€” Select â€”</option>
            {options.map(opt => <option key={opt} value={opt}>{opt}</option>)}
          </select>
        </div>
      );
    }

    function SummaryCard({ title, value, sub }) {
      return (
        <div className="rounded-2xl border p-4 shadow-sm bg-white">
          <div className="text-sm text-gray-500">{title}</div>
          <div className="text-2xl font-semibold">{value}</div>
          {sub && <div className="text-xs text-gray-500 mt-1">{sub}</div>}
        </div>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<App />);
  </script>
</body>
</html>
